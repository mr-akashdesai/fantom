import React, { useEffect, useState } from 'react'
import Mailjs from '@cemalgnlts/mailjs'
import { useNavigate } from 'react-router-dom'
import { Loader } from 'rsuite'
import { ICredentials } from '../../types/TempMail/ICredentials'
import { IStorage } from '../../types/TempMail/IStorage'
import MailHeader from './MailHeader'
import MailMessages from './MailMessages'
import MailModal from './MailModal'

const TempMail = () => {
  const mailjs = new Mailjs()
  const history = useNavigate()

  const [loading, setLoading] = useState(true)
  const [credentials, setCredentials] = useState<ICredentials>(null)
  const [showLoginModal, setShowLoginModal] = useState(false)
  const [messages, setMessages] = useState(null)
  const [storage, setStorage] = useState<IStorage>(null)

  useEffect(() => {
    setLoading(true)
    shouldPromptLogin()
  }, [])

  useEffect(() => {
    setLoading(true)
    loginWithUpdatedCredentials()
  }, [credentials])

  const loginWithUpdatedCredentials = () => {
    credentials &&
      credentials.password &&
      mailjs.login(credentials.username, credentials.password).then(res => {
        window.localStorage.setItem('token', res.data.token)
        Promise.all([
          mailjs.me().then(res => setStorage({ quota: res.data.quota, used: res.data.used })),
          mailjs.getMessages().then(res => setMessages(res.data))
        ]).then(() => setLoading(false))
      })
  }

  const shouldPromptLogin = () => {
    const token = window.localStorage.getItem('token')

    if (token) {
      setShowLoginModal(false)
      Promise.all([mailjs.loginWithToken(token)])
        .then(() => {
          Promise.all([
            mailjs.me().then(res => setStorage({ quota: res.data.quota, used: res.data.used })),
            mailjs.getMessages().then(res => setMessages(res.data)),
            setCredentials({ username: mailjs.address, autoGenerated: false })
          ])
        })
        .then(() => setLoading(false))
    } else {
      setLoading(false)
      setShowLoginModal(true)
    }
  }

  if (loading) return <Loader size={'lg'} backdrop content='loading...' vertical />

  return (
    <div className='page-container'>
      {!loading && credentials && storage && messages && (
        <>
          <h3>Temp Mail ðŸ“¨</h3>
          <div className='tempMail__container'>
            <MailHeader
              credentials={credentials}
              setShowLoginModal={setShowLoginModal}
              setCredentials={setCredentials}
              setMessages={setMessages}
              storage={storage}
            />
            <MailMessages messages={messages} />
          </div>
        </>
      )}
      <MailModal
        mailjs={mailjs}
        showLoginModal={showLoginModal}
        setShowLoginModal={setShowLoginModal}
        history={history}
        setCredentials={setCredentials}
      />
    </div>
  )
}

export default TempMail
